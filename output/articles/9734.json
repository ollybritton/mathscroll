{"title":"Low (complexity)","summary":"In computational complexity theory, a language B (or a complexity class B) is said to be low for a complexity class A  (with some reasonable relativized version of A) if AB = A; that is, A with an oracle for B is equal to A.[1] Such a statement implies that an abstract machine which solves problems in A achieves no additional power if it is given the ability to solve problems in B at unit cost. In particular, this means that if B is low for A then B is contained in A. Informally, lowness means that problems in B are not only solvable by machines which can solve problems in A, but are “easy to solve”. An A machine can simulate many oracle queries to B without exceeding its resource bounds.","image":"6495b73182b2a912c1d385176c11072cecba014a.svg","url":"Low_(complexity)"}